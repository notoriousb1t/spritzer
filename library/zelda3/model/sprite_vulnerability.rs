use strum_macros::Display;

use super::sprite_id::SpriteId;
use super::sprite_table::get_sprite_type;
use super::sprite_type::SpriteType;

#[derive(Copy, Clone, Debug, Display, Eq, PartialEq, Hash)]
pub(crate) enum SpriteVulnerability {
    /// Sprite cannot be damaged through normal means.
    Invulnerable,
    /// Sprite takes most forms of damage.
    All,
    /// Sprite primarily takes damage from a Bow.
    Bow,
    /// Sprite primarily takes damage from a Hammer.
    Hammer,
    /// Sprite primarily takes damage from the Fire Rod.
    FireRod,
}

pub(crate) fn get_sprite_vulnerability(sprite_id: &SpriteId) -> SpriteVulnerability {
    match sprite_id {
        SpriteId::x27_DEADROCK => SpriteVulnerability::Invulnerable,
        SpriteId::x77_ANTIFAIRY_2 => SpriteVulnerability::Invulnerable,
        SpriteId::x7C_GREEN_STALFOS => SpriteVulnerability::Invulnerable,
        SpriteId::x84_RED_EYEGORE => SpriteVulnerability::Bow,
        SpriteId::x8E_TERRORPIN => SpriteVulnerability::Hammer,
        SpriteId::x9A_KYAMERON => SpriteVulnerability::Invulnerable,
        SpriteId::xA1_FREEZOR => SpriteVulnerability::FireRod,
        SpriteId::xB8_MIMIC => SpriteVulnerability::Bow,
        SpriteId::xCA_CHAIN_CHOMP => SpriteVulnerability::Invulnerable,
        _ => match get_sprite_type(sprite_id) {
            SpriteType::Enemy => SpriteVulnerability::All,
            SpriteType::Boss => SpriteVulnerability::All,
            _ => SpriteVulnerability::Invulnerable,
        },
    }
}
